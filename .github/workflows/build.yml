name: Build
on:
  # Trigger the workflow on pushes to only the 'main' branch (this avoids duplicate checks being run e.g. for dependabot pull requests)
  push:
    branches: [main]
  # Trigger the workflow on any pull request
  pull_request:

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

env:
  INTELLIJ_SOURCES: ${{ github.workspace }}/intellij-community/

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current repository
        uses: actions/checkout@v3

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1.0.4

      # TODO: Fetch version number for regex from gradle properties
      - name: Find latest tag for given IntelliJ version
        uses: oprypin/find-latest-tag@v1.1.0
        id: intellij-tag
        with:
          repository: JetBrains/intellij-community
          regex: ^idea/222\.3345\.118

      - name: Checkout intellij-community repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          repository: JetBrains/intellij-community
          ref: ${{ steps.intellij-tag.outputs.tag }}
          path: intellij-community

      - name: Setup Java environment for the next steps
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 11
          cache: gradle

      - name: Set environment variables and export properties
        id: properties
        run: |
          PROPERTIES="$(./gradlew properties --console=plain -q)"
          VERSION="$(echo "$PROPERTIES" | grep "^version:" | cut -f2- -d ' ')"
          NAME="$(echo "$PROPERTIES" | grep "^pluginName:" | cut -f2- -d ' ')"
          CHANGELOG="$(./gradlew getChangelog --unreleased --no-header --console=plain -q)"
          CHANGELOG="${CHANGELOG//'%'/'%25'}"
          CHANGELOG="${CHANGELOG//$'\n'/'%0A'}"
          CHANGELOG="${CHANGELOG//$'\r'/'%0D'}"
          echo "::set-output name=version::$VERSION"
          echo "::set-output name=name::$NAME"
          echo "::set-output name=changelog::$CHANGELOG"
          echo "::set-output name=pluginVerifierHomeDir::~/.pluginVerifier"
          ./gradlew listProductsReleases # prepare list of IDEs for Plugin Verifier

      - name: Run tests
        run: ./gradlew test

      - name: Collect test results of failed tests
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: tests-result
          path: ${{ github.workspace }}/build/reports/tests

      - name: Setup Plugin Verifier IDEs cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.properties.outputs.pluginVerifierHomeDir }}/ides
          key: plugin-verifier-${{ hashFiles('build/listProductsReleases.txt') }}

      - name: Run Verify Plugin and IntelliJ Plugin Verifier tool
        run: ./gradlew runPluginVerifier -Pplugin.verifier.home.dir=${{ steps.properties.outputs.pluginVerifierHomeDir }}

      - name: Collect Plugin Verifier result
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: pluginVerifier-result
          path: ${{ github.workspace }}/build/reports/pluginVerifier

      - name: Prepare plugin archive content for creating artifact
        id: artifact
        working-directory: ${{ github.workspace }}/build/distributions
        run: |
          FILENAME=`ls *.zip`
          unzip "$FILENAME" -d content
          echo "::set-output name=filename::${FILENAME:0:-4}"

      - name: Upload already-built plugin as an artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.artifact.outputs.filename }}
          path: ./build/distributions/content/*/*

  # Prepare a draft release for GitHub Releases page for manual verification
  # If accepted and published, release workflow would be triggered
  release_draft:
    name: Release Draft
    if: github.event_name != 'pull_request'
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout current repository
        uses: actions/checkout@v3

      # Remove old release drafts by using the curl request for the available releases with draft flag
      - name: Remove old release drafts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api repos/{owner}/{repo}/releases \
            --jq '.[] | select(.draft == true) | .id' \
            | xargs -I '{}' gh api -X DELETE repos/{owner}/{repo}/releases/{}

      # Create new release draft - which is not publicly visible and requires manual acceptance
      - name: Create new release draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create v${{ needs.build.outputs.version }} \
            --draft \
            --title "v${{ needs.build.outputs.version }}" \
            --notes "$(cat << 'EOM'
          ${{ needs.build.outputs.changelog }}
          EOM
          )"